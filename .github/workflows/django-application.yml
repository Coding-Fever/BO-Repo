name: Deploy Backend Application and Configuration

on:
  workflow_dispatch:

env:
  PROJECT_ID: bo-stage
  REGION: asia-south1
  ARTIFACT_REPO: bo-backend-django
  IMAGE_NAME: backend-application
  
jobs:
  setup:
    uses: ./.github/workflows/install.yml
    secrets: inherit
    
  deploy:
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: bo-stage
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:latest
          
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials demo-cluster --region asia-south1 --project bo-stage
          
      - name: Deploy Helm Chart
        id: deploy
        run: |
          helm upgrade --install backend-application ./application --set image.tag=${{ github.sha }} || echo "::set-output name=deploy_failed::true"

      - name: Rollback if deployment failed
        if: steps.deploy.outputs.deploy_failed == 'true'
        run: |
          LAST_REVISION=$(helm history backend-application -o json | jq -r '.[] | select(.status == "deployed") | .revision' | sort -rn | head -n 1)
          if [ -n "$LAST_REVISION" ]; then
            echo "Rolling back to revision $LAST_REVISION"
            helm rollback backend-application $LAST_REVISION
          else
            echo "No previous successful revision found. Unable to rollback."
            exit 1
          fi
